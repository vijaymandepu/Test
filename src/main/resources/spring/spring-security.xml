<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/security
	http://www.springframework.org/schema/security/spring-security.xsd">
	  <!-- Stateless RESTful service using Basic authentication -->
	<http pattern="/restful/admin**" entry-point-ref="restAuthenticationEntryPoint" create-session="stateless">
  	      <intercept-url pattern="/**" access="hasRole('ROLE_ADMIN')"/>
  	      <access-denied-handler error-page="/restful/403Page" />
  	      <form-login authentication-success-handler-ref="mySuccessHandler" username-parameter="username"
  			password-parameter="password"  login-processing-url="/restful/loginProcessing" default-target-url="/restful/welcomeRest" />
  		<csrf/>
  	      <logout />
   </http>
	 <!-- Rest authentication entry point configuration
    <http pattern="/api**" use-expressions="true" create-session="stateless"
        entry-point-ref="restServicesEntryPoint">
        <intercept-url pattern="/**" />
        <form-login authentication-success-handler-ref="mySuccessHandler" />
        <access-denied-handler ref="myAuthenticationAccessDeniedHandler" />
        <http-basic />
    </http> -->
    
    <!-- Entry point for REST service. -->
    <beans:bean id="restServicesEntryPoint"
        class="spring.security.custom.rest.api.security.RestAuthenticationEntryPoint" />
 
       <!-- Connect the custom authentication success handler
    <beans:bean id="mySuccessHandler"
        class="spring.security.custom.rest.api.security.RestAuthenticationSuccessHandler" />
 	 -->
    <!-- Using Authentication Access Denied handler -->
    <beans:bean id="myAuthenticationAccessDeniedHandler"
        class="spring.security.custom.rest.api.security.RestAuthenticationAccessDeniedHandler" />
 
 

	<http >
		<intercept-url pattern="/admin**" access="hasRole('ROLE_ADMIN')" />
		<!-- access denied page -->
		<access-denied-handler error-page="/403Page" />
		<form-login 
		    login-page="/loginPage"
		    login-processing-url="/login" 
		    default-target-url="/welcome" 
			authentication-failure-url="/loginPage?error" 
			username-parameter="username"
			password-parameter="password"
			authentication-success-handler-ref="savedRequestAwareAuthenticationSuccessHandler"  />
		<logout logout-success-url="/loginPage?logout"
		 />
		<!-- enable csrf protection -->
		<csrf/>
		
		 <!-- enable remember me -->
	    <remember-me 
	        token-validity-seconds="1209600"
		remember-me-parameter="remember-me" 
		data-source-ref="dataSource" />
		
		
	</http>
<!--  In-Memory authentication 
	<authentication-manager>
		<authentication-provider>
			<user-service>
				<user name="vijay" password="123456" authorities="ROLE_USER" />
			</user-service>
		</authentication-provider>
	</authentication-manager> -->
	
	<!-- Select users and user_roles from database -->
	<authentication-manager>
	  <authentication-provider>
	  	<password-encoder ref="encoder"/>
		<jdbc-user-service data-source-ref="dataSource"
		  users-by-username-query=
		    "select username,password, enabled from users where username=?"
		  authorities-by-username-query=
		    "select username, role from user_roles where username =?  " />
	  </authentication-provider>
	</authentication-manager>
	<!-- 
	the above authentication works on BCryptPasswordEncoder and verifies against the password stored in database after the encryption as below
		BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder();
		String hashedPassword = passwordEncoder.encode(password);
	
	 -->
	<beans:bean id="encoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder">
		<beans:constructor-arg name="strength" value="10" />
	</beans:bean>
	<beans:bean id="mySuccessHandler" class="com.test.spring.controller.MySavedRequestAwareAuthenticationSuccessHandler"/>
	<beans:bean id="restAuthenticationEntryPoint" class="com.test.spring.controller.RestAuthenticationEntryPoint"/>
</beans:beans>